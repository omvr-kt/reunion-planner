<%- include('../../partials/header') %>

<div class="d-flex justify-content-between align-items-center mb-4">
    <h1>Créer une réunion</h1>
</div>

<form action="/meetings/create" method="POST" id="create-meeting-form">
    <input type="hidden" name="_csrf" value="<%= csrfToken %>">
    <div class="card mb-4">
        <div class="card-header">
            <h4>Informations générales</h4>
        </div>
        <div class="card-body">
            <div class="mb-3">
                <label for="title" class="form-label">Titre de la réunion *</label>
                <input type="text" class="form-control" id="title" name="title" required>
            </div>
            
            <div class="mb-3">
                <label for="description" class="form-label">Description</label>
                <textarea class="form-control" id="description" name="description" rows="3"></textarea>
            </div>
            
            <div class="mb-3">
                <label for="location" class="form-label">Lieu</label>
                <input type="text" class="form-control" id="location" name="location">
            </div>
        </div>
    </div>
    
    <div class="card mb-4">
        <div class="card-header d-flex justify-content-between align-items-center">
            <h4>Propositions de créneaux</h4>
            <button type="button" class="btn btn-outline-primary btn-sm" id="add-timeslot">
                <i class="bi bi-plus"></i> Ajouter un créneau
            </button>
        </div>
        <div class="card-body">
            <div id="timeslots-container">
                <div class="row mb-3 timeslot-row">
                    <div class="col-md-6">
                        <label class="form-label">Date et heure de début</label>
                        <input type="datetime-local" class="form-control timeslot-start" required min="">
                    </div>
                    <div class="col-md-5">
                        <label class="form-label">Date et heure de fin</label>
                        <input type="datetime-local" class="form-control timeslot-end" required min="">
                    </div>
                    <div class="col-md-1 d-flex align-items-end">
                        <button type="button" class="btn btn-outline-danger remove-timeslot">
                            <i class="bi bi-trash"></i>
                        </button>
                    </div>
                </div>
            </div>
            
            <div id="timeslots-hidden-container"></div>
        </div>
    </div>
    
    <div class="card mb-4">
        <div class="card-header d-flex justify-content-between align-items-center">
            <h4>Participants</h4>
            <button type="button" class="btn btn-outline-primary btn-sm" id="add-participant">
                <i class="bi bi-plus"></i> Ajouter un participant
            </button>
        </div>
        <div class="card-body">
            <div id="participants-container">
                <div class="row mb-3 participant-row">
                    <div class="col-md-11">
                        <label class="form-label">Email du participant</label>
                        <input type="email" class="form-control participant-email" name="participants[]" required>
                    </div>
                    <div class="col-md-1 d-flex align-items-end">
                        <button type="button" class="btn btn-outline-danger remove-participant">
                            <i class="bi bi-trash"></i>
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <div class="d-flex justify-content-between">
        <a href="/dashboard" class="btn btn-outline-secondary">Annuler</a>
        <button type="submit" class="btn btn-primary">Créer la réunion</button>
    </div>
</form>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Définir la date minimum (aujourd'hui) pour les champs datetime-local
        const today = new Date();
        const year = today.getFullYear();
        const month = String(today.getMonth() + 1).padStart(2, '0');
        const day = String(today.getDate()).padStart(2, '0');
        const hours = String(today.getHours()).padStart(2, '0');
        const minutes = String(today.getMinutes()).padStart(2, '0');
        const minDateTime = `${year}-${month}-${day}T${hours}:${minutes}`;
        
        // Appliquer la date minimum à tous les champs datetime-local existants
        document.querySelectorAll('input[type="datetime-local"]').forEach(input => {
            input.min = minDateTime;
        });
        document.getElementById('add-timeslot').addEventListener('click', function() {
            const container = document.getElementById('timeslots-container');
            const newRow = document.querySelector('.timeslot-row').cloneNode(true);
            
            // Appliquer la date minimum aux nouveaux champs
            newRow.querySelector('.timeslot-start').value = '';
            newRow.querySelector('.timeslot-start').min = minDateTime;
            newRow.querySelector('.timeslot-end').value = '';
            newRow.querySelector('.timeslot-end').min = minDateTime;
            
            newRow.querySelector('.remove-timeslot').addEventListener('click', function() {
                if (document.querySelectorAll('.timeslot-row').length > 1) {
                    this.closest('.timeslot-row').remove();
                }
            });
            
            container.appendChild(newRow);
        });
        
        document.querySelectorAll('.remove-timeslot').forEach(button => {
            button.addEventListener('click', function() {
                if (document.querySelectorAll('.timeslot-row').length > 1) {
                    this.closest('.timeslot-row').remove();
                }
            });
        });
        
        document.getElementById('add-participant').addEventListener('click', function() {
            const container = document.getElementById('participants-container');
            const newRow = document.querySelector('.participant-row').cloneNode(true);
            
            newRow.querySelector('.participant-email').value = '';
            newRow.querySelector('.participant-email').value = '';
            
            newRow.querySelector('.remove-participant').addEventListener('click', function() {
                if (document.querySelectorAll('.participant-row').length > 1) {
                    this.closest('.participant-row').remove();
                }
            });
            
            container.appendChild(newRow);
        });
        
        document.querySelectorAll('.remove-participant').forEach(button => {
            button.addEventListener('click', function() {
                if (document.querySelectorAll('.participant-row').length > 1) {
                    this.closest('.participant-row').remove();
                }
            });
        });
        
        document.getElementById('create-meeting-form').addEventListener('submit', function(e) {
            e.preventDefault();
            
            const timeslotsContainer = document.getElementById('timeslots-hidden-container');
            timeslotsContainer.innerHTML = '';
            let hasError = false;
            
            document.querySelectorAll('.timeslot-row').forEach(row => {
                const startTime = row.querySelector('.timeslot-start').value;
                const endTime = row.querySelector('.timeslot-end').value;
                
                if (startTime && endTime) {
                    const startDate = new Date(startTime);
                    const now = new Date();
                    
                    if (startDate < now) {
                        alert('La date et heure de début ne peut pas être dans le passé');
                        hasError = true;
                        return;
                    }
                    
                    const hiddenInput = document.createElement('input');
                    hiddenInput.type = 'hidden';
                    hiddenInput.name = 'timeslots[]';
                    hiddenInput.value = `${startTime} - ${endTime}`;
                    
                    timeslotsContainer.appendChild(hiddenInput);
                }
            });
            
            if (!hasError) {
                this.submit();
            }
        });
    });
</script>

<%- include('../../partials/footer') %>