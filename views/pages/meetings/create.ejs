<%- include('../../partials/header') %>

<div class="d-flex justify-content-between align-items-center mb-4">
    <h1>Créer une réunion</h1>
</div>

<form action="/meetings/create" method="POST" id="create-meeting-form">
    <input type="hidden" name="_csrf" value="<%= csrfToken %>">
    <div class="card mb-4">
        <div class="card-header">
            <h4>Informations générales</h4>
        </div>
        <div class="card-body">
            <div class="mb-3">
                <label for="title" class="form-label">Titre de la réunion *</label>
                <input type="text" class="form-control" id="title" name="title" required>
            </div>
            
            <div class="mb-3">
                <label for="description" class="form-label">Description</label>
                <textarea class="form-control" id="description" name="description" rows="3"></textarea>
            </div>
            
            <div class="mb-3">
                <label for="location" class="form-label">Lieu</label>
                <input type="text" class="form-control" id="location" name="location">
            </div>
        </div>
    </div>
    
    <div class="card mb-4">
        <div class="card-header d-flex justify-content-between align-items-center">
            <h4>Propositions de créneaux</h4>
            <button type="button" class="btn btn-outline-primary btn-sm" id="add-timeslot">
                <i class="bi bi-plus"></i> Ajouter un créneau
            </button>
        </div>
        <div class="card-body">
            <div id="timeslots-container">
                <div class="row mb-3 timeslot-row">
                    <div class="col-md-6">
                        <label class="form-label">Date et heure de début</label>
                        <input type="datetime-local" class="form-control timeslot-start" required>
                    </div>
                    <div class="col-md-5">
                        <label class="form-label">Date et heure de fin</label>
                        <input type="datetime-local" class="form-control timeslot-end" required>
                    </div>
                    <div class="col-md-1 d-flex align-items-end">
                        <button type="button" class="btn btn-outline-danger remove-timeslot">
                            <i class="bi bi-trash"></i>
                        </button>
                    </div>
                </div>
            </div>
            
            <div id="timeslots-hidden-container"></div>
        </div>
    </div>
    
    <div class="card mb-4">
        <div class="card-header d-flex justify-content-between align-items-center">
            <h4>Participants</h4>
            <button type="button" class="btn btn-outline-primary btn-sm" id="add-participant">
                <i class="bi bi-plus"></i> Ajouter un participant
            </button>
        </div>
        <div class="card-body">
            <div id="participants-container">
                <div class="row mb-3 participant-row">
                    <div class="col-md-11">
                        <label class="form-label">Email du participant</label>
                        <input type="email" class="form-control participant-email" name="participants[]" required>
                    </div>
                    <div class="col-md-1 d-flex align-items-end">
                        <button type="button" class="btn btn-outline-danger remove-participant">
                            <i class="bi bi-trash"></i>
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <div class="d-flex justify-content-between">
        <a href="/dashboard" class="btn btn-outline-secondary">Annuler</a>
        <button type="submit" class="btn btn-primary">Créer la réunion</button>
    </div>
</form>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        function getFormattedDateTime(date) {
            const year = date.getFullYear();
            const month = (date.getMonth() + 1).toString().padStart(2, '0');
            const day = date.getDate().toString().padStart(2, '0');
            const hours = date.getHours().toString().padStart(2, '0');
            const minutes = date.getMinutes().toString().padStart(2, '0');
            return `${year}-${month}-${day}T${hours}:${minutes}`;
        }

        function addMinutesToDateTimeString(dateTimeStr, minutesToAdd) {
            if (!dateTimeStr) return ''; // Retourne une chaîne vide si l'entrée est vide
            const date = new Date(dateTimeStr);
            date.setMinutes(date.getMinutes() + minutesToAdd);
            return getFormattedDateTime(date);
        }

        const now = new Date();
        // Arrondir à la minute la plus proche pour éviter les problèmes de validation avec les secondes
        now.setSeconds(0, 0);
        const nowFormatted = getFormattedDateTime(now);

        function applyTimeslotRestrictions(timeslotRow) {
            const startInput = timeslotRow.querySelector('.timeslot-start');
            const endInput = timeslotRow.querySelector('.timeslot-end');

            if (!startInput || !endInput) return;

            // Restriction pour la date de début
            startInput.min = nowFormatted;

            // Restriction pour la date de fin basée sur la date de début
            startInput.addEventListener('input', function() {
                if (this.value) {
                    const startDateValue = this.value;
                    const minEndDateValue = addMinutesToDateTimeString(startDateValue, 1);
                    
                    endInput.min = minEndDateValue;
                    
                    if (!endInput.value || (endInput.value && new Date(endInput.value) < new Date(minEndDateValue))) {
                        endInput.value = minEndDateValue;
                    }
                } else {
                    endInput.min = nowFormatted;
                    if (endInput.value && new Date(endInput.value) < new Date(nowFormatted)) {
                        endInput.value = nowFormatted;
                    }
                }
            });
            
            // Définir la restriction initiale pour la date de fin
            if (startInput.value) {
                const minEndDateValueInitial = addMinutesToDateTimeString(startInput.value, 1);
                endInput.min = minEndDateValueInitial;
                if (endInput.value && new Date(endInput.value) < new Date(minEndDateValueInitial)) {
                    endInput.value = minEndDateValueInitial;
                }
            } else {
                endInput.min = nowFormatted;
                 if (endInput.value && new Date(endInput.value) < new Date(nowFormatted)) {
                    endInput.value = nowFormatted;
                }
            }

            // Assurer que la valeur initiale de la date de fin n'est pas antérieure à sa propre restriction minimale
            // Cette vérification redondante peut être simplifiée car déjà couverte au-dessus
            // if (endInput.value && endInput.value < endInput.min) {
            //      endInput.value = endInput.min;
            // }
        }

        // Appliquer aux lignes de créneaux existantes (initialement une seule)
        document.querySelectorAll('.timeslot-row').forEach(applyTimeslotRestrictions);

        document.getElementById('add-timeslot').addEventListener('click', function() {
            const container = document.getElementById('timeslots-container');
            const templateRow = document.querySelector('.timeslot-row'); // Utiliser la première ligne comme modèle
            if (!templateRow) return; // Sécurité au cas où la première ligne serait supprimée
            const newRow = templateRow.cloneNode(true);
            
            const newStartInput = newRow.querySelector('.timeslot-start');
            const newEndInput = newRow.querySelector('.timeslot-end');

            newStartInput.value = '';
            newEndInput.value = '';
            
            // Appliquer les restrictions à la nouvelle ligne
            applyTimeslotRestrictions(newRow);
            
            newRow.querySelector('.remove-timeslot').addEventListener('click', function() {
                if (document.querySelectorAll('.timeslot-row').length > 1) {
                    this.closest('.timeslot-row').remove();
                }
            });
            
            container.appendChild(newRow);
        });
        
        document.querySelectorAll('.remove-timeslot').forEach(button => {
            button.addEventListener('click', function() {
                if (document.querySelectorAll('.timeslot-row').length > 1) {
                    this.closest('.timeslot-row').remove();
                }
            });
        });
        
        document.getElementById('add-participant').addEventListener('click', function() {
            const container = document.getElementById('participants-container');
            const templateRow = document.querySelector('.participant-row');
            if (!templateRow) return;
            const newRow = templateRow.cloneNode(true);
            
            newRow.querySelector('.participant-email').value = '';
            
            newRow.querySelector('.remove-participant').addEventListener('click', function() {
                if (document.querySelectorAll('.participant-row').length > 1) {
                    this.closest('.participant-row').remove();
                }
            });
            
            container.appendChild(newRow);
        });
        
        document.querySelectorAll('.remove-participant').forEach(button => {
            button.addEventListener('click', function() {
                if (document.querySelectorAll('.participant-row').length > 1) {
                    this.closest('.participant-row').remove();
                }
            });
        });
        
        document.getElementById('create-meeting-form').addEventListener('submit', function(e) {
            // Pas de prévention de e.preventDefault() ici si la validation HTML5 suffit
            // e.preventDefault(); // Décommenter si une validation JS plus complexe est nécessaire avant soumission
            
            const timeslotsContainer = document.getElementById('timeslots-hidden-container');
            timeslotsContainer.innerHTML = ''; // Vider les anciens champs cachés
            
            let allTimeslotsValid = true;
            document.querySelectorAll('.timeslot-row').forEach(row => {
                const startTimeInput = row.querySelector('.timeslot-start');
                const endTimeInput = row.querySelector('.timeslot-end');
                
                const startTime = startTimeInput.value;
                const endTime = endTimeInput.value;
                
                if (startTime && endTime) {
                    if (new Date(endTime) < new Date(startTime)) {
                        allTimeslotsValid = false;
                        // Optionnel: afficher une erreur plus spécifique ici, bien que la validation HTML5 devrait déjà le faire
                        // startTimeInput.setCustomValidity('La date de fin ne peut pas être avant la date de début.'); // Exemple
                    }
                    // startTimeInput.setCustomValidity(''); // Réinitialiser en cas de validité

                    const hiddenInput = document.createElement('input');
                    hiddenInput.type = 'hidden';
                    hiddenInput.name = 'timeslots[]';
                    hiddenInput.value = `${startTime} - ${endTime}`;
                    timeslotsContainer.appendChild(hiddenInput);
                } else if (startTimeInput.required || endTimeInput.required) {
                    // Si les champs sont requis et vides, la validation HTML5 s'en chargera
                    allTimeslotsValid = false;
                }
            });

            if (!allTimeslotsValid) {
                e.preventDefault(); // Empêcher la soumission si la validation JS personnalisée échoue
                // Vous pouvez afficher un message d'erreur global ici si nécessaire
                alert('Veuillez corriger les erreurs dans les créneaux horaires.');
                return;
            }
            
            // Si e.preventDefault() a été appelé plus haut, il faut soumettre manuellement:
            // this.submit(); // Décommenter si e.preventDefault() est utilisé pour une validation JS personnalisée
        });
    });
</script>

<%- include('../../partials/footer') %>